<%- layout("layouts/navbar.ejs") %>

<% if (typeof error !== "undefined" && error) { %>
  <!-- This is for server-side errors on page load -->
  <div class"bg-red-100 text-red-700 border border-red-300 px-4 py-3 rounded-md w-80 mx-auto mt-6 text-center">
    <%= error %>
  </div>
<% } %>

<div class="min-h-screen flex items-center justify-center bg-gray-50 px-4">
  <div class="bg-white p-10 rounded-xl shadow-xl w-full max-w-md">
    <a href="/auth/google" 
   class="w-full flex items-center justify-center gap-2 bg-white border border-gray-300 text-gray-700 font-semibold py-3 rounded-lg hover:bg-gray-50 transition mb-4">
  <img src="https://www.google.com/images/branding/googleg/1x/googleg_standard_color_28dp.png" alt="Google icon" class="w-5 h-5">
  Sign Up with Google
</a>
<div class="text-center mb-4 text-gray-400 text-sm">OR</div>
    
    <h2 class="text-2xl font-semibold text-center text-gray-800 mb-6">Create Account</h2>
        
    <!-- This form's submission will now be handled by JavaScript -->
    <form id="signupForm" method="POST" action="/signup_user" class="space-y-4">

      <!-- This div will contain the main signup fields -->
      <div id="step-1-fields">
        <div>
          <label for="fullname" class="block text-gray-600 text-sm mb-1">Full Name</label>
          <input type="text" id="fullname" name="fullname" placeholder="Enter your full name" required
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>
        
        <div>
          <label for="email" class="block text-gray-600 text-sm mb-1">Email</label>
          <input type="email" id="email" name="email" placeholder="Enter your email" required
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>

        <div>
          <label for="phone" class="block text-gray-600 text-sm mb-1">Phone Number (10 digits)</label>
          <input type="tel" id="phone" name="phone" placeholder="9876543210" required
            pattern="^\d{10}$"
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>
              
        <div>
          <label for="password" class="block text-gray-600 text-sm mb-1">Password</label>
          <input type="password" id="password" name="password" placeholder="Create a password" required
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>
        
        <div>
          <label for="confirm-password" class="block text-gray-600 text-sm mb-1">Confirm Password</label>
          <input type="password" id="confirm-password" name="confirm_password" placeholder="Re-enter your password" required
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>
      </div>

      <!-- This div is for OTP verification, hidden by default -->
      <div id="step-2-otp" class="hidden space-y-4">
        <p class="text-sm text-gray-600">
          An OTP has been sent to <strong id="phone-display"></strong>. Please enter it below.
        </p>
        <div>
          <label for="otp" class="block text-gray-600 text-sm mb-1">Enter 6-Digit OTP</label>
          <input type="text" id="otp" name="otp" placeholder="123456"
            pattern="^\d{6}$"
            class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 transition" />
        </div>
      </div>
      
      <!-- This div is for showing client-side error messages -->
      <div id="message-display" class="hidden p-3 rounded-md text-sm"></div>

      <button type="submit" id="submit-button"
        class="w-full bg-cyan-500 text-white font-semibold py-3 rounded-lg hover:bg-cyan-600 transform hover:-translate-y-1 transition">
        Send OTP & Sign Up
      </button>
    </form>

    <div class="text-center mt-4 text-gray-600 text-sm">
      Already have an account? 
      <a href="/login" class="text-cyan-500 font-medium hover:underline">Login</a>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const signupForm = document.getElementById('signupForm');
    const step1Fields = document.getElementById('step-1-fields');
    const step2Otp = document.getElementById('step-2-otp');
    const submitButton = document.getElementById('submit-button');
    const messageDisplay = document.getElementById('message-display');
    const phoneDisplay = document.getElementById('phone-display');
    
    // Form inputs
    const fullnameInput = document.getElementById('fullname');
    const emailInput = document.getElementById('email');
    const phoneInput = document.getElementById('phone');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirm-password');
    const otpInput = document.getElementById('otp');

    let isOtpSent = false;
    let fullPhoneNumber; // To store the number with country code

    signupForm.addEventListener('submit', async (e) => {
        e.preventDefault(); // Stop the form from submitting normally
        
        if (!isOtpSent) {
            await stageOneSendOtp();
        } else {
            await stageTwoVerifyOtp();
        }
    });

    async function stageOneSendOtp() {
        // --- 1. Client-side Validation ---
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const phone = phoneInput.value.trim();

        if (password !== confirmPassword) {
            showMessage('Passwords do not match.', 'danger');
            return;
        }
        if (!/^\d{10}$/.test(phone)) {
            showMessage('Please enter a valid 10-digit phone number.', 'danger');
            return;
        }
        if (!fullnameInput.value || !emailInput.value || !password) {
            showMessage('Please fill in all fields.', 'danger');
            return;
        }

        // --- 2. Prepare Data ---
        // IMPORTANT: Twilio needs the country code. We assume '+91' for India.
        fullPhoneNumber = `+91${phone}`;
        
        const formData = {
            fullname: fullnameInput.value,
            email: emailInput.value,
            phone: fullPhoneNumber, // Send the full +91 number
            password: password,
        };

        // --- 3. Send data to server to send OTP ---
        submitButton.disabled = true;
        submitButton.textContent = 'Sending OTP...';
        showMessage('Sending OTP...', 'info', true);

        try {
            const response = await fetch('/signup-send-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to send OTP.');
            }

            // --- 4. Success! Switch to OTP input ---
            isOtpSent = true;
            step1Fields.classList.add('hidden');
            step2Otp.classList.remove('hidden');
            phoneDisplay.textContent = fullPhoneNumber;
            submitButton.textContent = 'Verify OTP & Create Account';
            showMessage('OTP sent successfully! Check your phone.', 'success');

        } catch (err) {
            showMessage(err.message, 'danger');
        } finally {
            submitButton.disabled = false;
        }
    }

    async function stageTwoVerifyOtp() {
        const otp = otpInput.value.trim();
        if (!/^\d{6}$/.test(otp)) {
            showMessage('Please enter a valid 6-digit OTP.', 'danger');
            return;
        }

        submitButton.disabled = true;
        submitButton.textContent = 'Verifying...';
        showMessage('Verifying OTP...', 'info', true);

        try {
            // Send OTP to a new verification route
            const response = await fetch('/signup-verify-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ otp: otp })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Invalid OTP.');
            }

            // --- 5. Final Success! Redirect. ---
            showMessage('Account created successfully! Redirecting...', 'success');
            // Server has logged us in, redirect to home
            window.location.href = '/';

        } catch (err) {
            showMessage(err.message, 'danger');
            submitButton.disabled = false;
            submitButton.textContent = 'Verify OTP & Create Account';
        }
    }

    // Helper to show messages
    function showMessage(message, type, isLoading = false) {
        const colors = {
            danger: 'bg-red-100 text-red-700',
            success: 'bg-green-100 text-green-700',
            info: 'bg-blue-100 text-blue-700'
        };
        messageDisplay.textContent = message;
        messageDisplay.className = `p-3 rounded-md text-sm ${colors[type]}`;

        if (isLoading) {
            // Show a spinner or similar
            messageDisplay.className += ' animate-pulse';
        }
    }
});
</script>

<%- include("layouts/footer.ejs") %>

