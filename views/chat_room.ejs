<%- layout("/layouts/navbar.ejs") %>

<script src="/socket.io/socket.io.js"></script>

<div class="flex items-center justify-center w-full h-[calc(100vh-100px)] bg-gray-100 p-4"> 
    <div class="w-full max-w-2xl h-full shadow-xl rounded-lg overflow-hidden bg-white border border-gray-200 flex flex-col">
        <div class="p-4 border-b bg-gray-50">
            <h2 class="font-semibold text-gray-800">Chat with <%= person.first_name %> <%= person.last_name %></h2>
        </div>

        <div id="message-list" class="flex-1 overflow-y-auto p-4 space-y-4">
            <p id="loading-msg" class="text-gray-500">Loading chat history...</p>
            {/* Messages will be added here */}
        </div>
      
        <div class="p-4 border-t bg-gray-50">
            <form id="message-form" class="flex gap-2">
                <input type="text" id="message-input" placeholder="Type your message..." class="flex-1 border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" autocomplete="off" required>
                <button type="submit" class="bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition">Send</button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- 1. Connect to Socket.IO ---
        const socket = io(); // Connects to the server

        // --- 2. Get Variables from EJS ---
        // 'currentUser' and 'person' are passed from your route
        const currentUserId = "<%= currentUser._id %>";
        const otherUserId = "<%= person._id %>";
        
        // --- 3. Define Room ID (must match backend logic) ---
        const roomId = [currentUserId, otherUserId].sort().join('-');

        // --- 4. Get DOM Elements ---
        const messageListDiv = document.getElementById('message-list');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const loadingMsg = document.getElementById('loading-msg');

        // --- 5. Join the Chat Room ---
        socket.emit('join room', roomId);
        console.log(`Joined room: ${roomId}`);

        // --- 6. Fetch Chat History ---
        async function fetchHistory() {
            try {
                const response = await fetch(`/api/chat/${otherUserId}`);
                if (!response.ok) throw new Error('Failed to fetch history');
                
                const messages = await response.json();
                loadingMsg.style.display = 'none';
                messageListDiv.innerHTML = ''; // Clear loading message
                
                messages.forEach(displayMessage);
                scrollToBottom();
            } catch (err) {
                console.error(err);
                loadingMsg.textContent = 'Error loading messages.';
            }
        }

        // --- 7. Listen for New Messages ---
        socket.on('chat message', (msg) => {
            // 'msg' is the object sent from the server
            // { senderId, message, createdAt }
            console.log('New message received:', msg);
            displayMessage(msg);
            scrollToBottom();
        });

        // --- 8. Handle Sending a Message (Form Submit) ---
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const messageText = messageInput.value.trim();

            if (messageText) {
                try {
                    // Send the message to your POST /chat/send route
                    const response = await fetch('/chat/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            receiverId: otherUserId,
                            message: messageText
                        })
                    });

                    if (response.ok) {
                        messageInput.value = ''; // Clear input
                    } else {
                        alert('Failed to send message.');
                    }
                } catch (err) {
                    console.error('Error sending message:', err);
                    alert('Error sending message.');
                }
            }
        });

        // --- Helper function to display a message ---
        function displayMessage(message) {
            const msgDiv = document.createElement('div');
            // 'message.senderId' will exist on both history and new messages
            const isMine = message.senderId === currentUserId;
            
            msgDiv.className = `p-2 rounded-lg max-w-[70%] ${isMine ? 'bg-blue-500 text-white self-end ml-auto' : 'bg-gray-200 text-gray-800 self-start mr-auto'}`;
            msgDiv.textContent = message.message; // Use 'message.message'
            
            messageListDiv.appendChild(msgDiv);
        }
        
        // --- Helper function to scroll to bottom ---
        function scrollToBottom() {
             messageListDiv.scrollTop = messageListDiv.scrollHeight;
        }

        // Start by fetching history
        fetchHistory();
    });
</script>

<%- include("layouts/footer.ejs") %>